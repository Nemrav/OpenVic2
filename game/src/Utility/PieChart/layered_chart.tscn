[gd_scene load_steps=9 format=3 uid="uid://crhqik1qoon22"]

[ext_resource type="Script" path="res://src/Utility/PieChart/LayeredChart.gd" id="1_6rkob"]
[ext_resource type="PackedScene" uid="uid://d1ovecukckt5c" path="res://src/Utility/PieChart/PieChart.tscn" id="2_8hpuw"]

[sub_resource type="Shader" id="Shader_ldoim"]
code = "shader_type canvas_item;

// The center in UV coordinates, which will always
//be 0.5, the actual radius will be controlled by the control node
//const vec2 center = vec2(0.5,0.5);
uniform float radius = 0.4;

//shadow
uniform vec2 shadow_displacement = vec2(0.75,0.75);
uniform float shadow_tightness = 10;
uniform float shadow_radius = 0.7;
uniform float shadow_thickness = 1.0;

// Control of the slices
uniform float stopAngles[5];
uniform vec3 colours[5];

// Trim
uniform vec3 trim_colour;
uniform float trim_size = 0.05;

// The center is spotlighted by the gradient,
//control its size and falloff with these
uniform float gradient_falloff = 3.6;
uniform float gradient_base = 3.1;

// control whether this is a donut instead of a pie chart
uniform bool donut = false;
uniform bool donut_inner_trim = false;
uniform float donut_inner_radius = 0.15;

// get the polar coordinates of a pixel relative to the center
vec2 getPolar(vec2 UVin, vec2 center){
	vec2 relcoord = (UVin-center);
	float dist = length(relcoord);
	float theta = PI/2.0 + atan((relcoord.y)/(relcoord.x));
	if(UVin.x < 0.5){
		theta += PI;
	}
	return vec2(dist,theta);
}

// from thebookofshaders, returns a gradient falloff
float parabola( float base, float x, float k ){
    return pow( base*x*(1.0-x), k );
}

float parabola_shadow(float base, float x){
	return base*x*x;
}

void fragment() {
	vec2 coords = getPolar(UV,vec2(0.5,0.5));
	float dist = coords.x;
	float theta = coords.y;

	vec2 shadow_polar = getPolar(UV,vec2(0.0+shadow_displacement.x,0.0+shadow_displacement.y));
	float shadow_peak = radius+(radius-donut_inner_radius)/2.0;
	float shadow_gradient = shadow_thickness+parabola_shadow(shadow_tightness*-10.0,shadow_polar.x+shadow_peak-shadow_radius);
	
	// inner hole of the donut => make it transparent
	if(donut && dist <= donut_inner_radius){
		COLOR = vec4(0.1,0.1,0.1,shadow_gradient);
	}
	// inner trim
	else if(donut && donut_inner_trim && dist <= donut_inner_radius + trim_size){
		COLOR = vec4(trim_colour,1.0);
	}
	// interior
	else if(dist <= radius-trim_size){ 
		for(int i=0;i<stopAngles.length();i++){
			if(theta <= stopAngles[i]){
				float gradient = parabola(gradient_base,dist,gradient_falloff);
				COLOR = vec4(colours[i]*(1.0-gradient),1.0);
				break;
			}
		}
	}
	// outer trim
	else if(dist <= radius){ 
		COLOR = vec4(trim_colour,1.0);
	}
	//outside the circle
	else{
		COLOR = vec4(0.1,0.1,0.1,shadow_gradient);
	}
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_7apkb"]
resource_name = "Piechart_shader"
shader = SubResource("Shader_ldoim")
shader_parameter/radius = 0.4
shader_parameter/shadow_displacement = Vector2(0.6, 0.6)
shader_parameter/shadow_tightness = 1.487
shader_parameter/shadow_radius = 0.5
shader_parameter/shadow_thickness = 2.29
shader_parameter/stopAngles = [3.14159, 5.02655, 6.28319]
shader_parameter/colours = [Vector3(0, 0, 1), Vector3(1, 1, 0), Vector3(0.4, 0, 0.6)]
shader_parameter/trim_colour = Vector3(0, 0, 0)
shader_parameter/trim_size = 0.02
shader_parameter/gradient_falloff = 3.6
shader_parameter/gradient_base = 3.1
shader_parameter/donut = false
shader_parameter/donut_inner_trim = true
shader_parameter/donut_inner_radius = 0.25

[sub_resource type="CanvasTexture" id="CanvasTexture_4w45o"]

[sub_resource type="Shader" id="Shader_30n4b"]
code = "shader_type canvas_item;

// The center in UV coordinates, which will always
//be 0.5, the actual radius will be controlled by the control node
//const vec2 center = vec2(0.5,0.5);
uniform float radius = 0.4;

//shadow
uniform vec2 shadow_displacement = vec2(0.75,0.75);
uniform float shadow_tightness = 10;
uniform float shadow_radius = 0.7;
uniform float shadow_thickness = 1.0;

// Control of the slices
uniform float stopAngles[5];
uniform vec3 colours[5];

// Trim
uniform vec3 trim_colour;
uniform float trim_size = 0.05;

// The center is spotlighted by the gradient,
//control its size and falloff with these
uniform float gradient_falloff = 3.6;
uniform float gradient_base = 3.1;

// control whether this is a donut instead of a pie chart
uniform bool donut = false;
uniform bool donut_inner_trim = false;
uniform float donut_inner_radius = 0.15;

// get the polar coordinates of a pixel relative to the center
vec2 getPolar(vec2 UVin, vec2 center){
	vec2 relcoord = (UVin-center);
	float dist = length(relcoord);
	float theta = PI/2.0 + atan((relcoord.y)/(relcoord.x));
	if(UVin.x < 0.5){
		theta += PI;
	}
	return vec2(dist,theta);
}

// from thebookofshaders, returns a gradient falloff
float parabola( float base, float x, float k ){
    return pow( base*x*(1.0-x), k );
}

float parabola_shadow(float base, float x){
	return base*x*x;
}

void fragment() {
	vec2 coords = getPolar(UV,vec2(0.5,0.5));
	float dist = coords.x;
	float theta = coords.y;

	vec2 shadow_polar = getPolar(UV,vec2(0.0+shadow_displacement.x,0.0+shadow_displacement.y));
	float shadow_peak = radius+(radius-donut_inner_radius)/2.0;
	float shadow_gradient = shadow_thickness+parabola_shadow(shadow_tightness*-10.0,shadow_polar.x+shadow_peak-shadow_radius);
	
	// inner hole of the donut => make it transparent
	if(donut && dist <= donut_inner_radius){
		COLOR = vec4(0.1,0.1,0.1,shadow_gradient);
	}
	// inner trim
	else if(donut && donut_inner_trim && dist <= donut_inner_radius + trim_size){
		COLOR = vec4(trim_colour,1.0);
	}
	// interior
	else if(dist <= radius-trim_size){ 
		for(int i=0;i<stopAngles.length();i++){
			if(theta <= stopAngles[i]){
				float gradient = parabola(gradient_base,dist,gradient_falloff);
				COLOR = vec4(colours[i]*(1.0-gradient),1.0);
				break;
			}
		}
	}
	// outer trim
	else if(dist <= radius){ 
		COLOR = vec4(trim_colour,1.0);
	}
	//outside the circle
	else{
		COLOR = vec4(0.1,0.1,0.1,shadow_gradient);
	}
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ryh8o"]
resource_name = "Piechart_shader"
shader = SubResource("Shader_30n4b")
shader_parameter/radius = 0.4
shader_parameter/shadow_displacement = Vector2(0.75, 0.75)
shader_parameter/shadow_tightness = 10.0
shader_parameter/shadow_radius = 0.8
shader_parameter/shadow_thickness = 0.0
shader_parameter/stopAngles = [3.14159, 5.02655, 6.28319]
shader_parameter/colours = [Vector3(0, 0, 1), Vector3(1, 1, 0), Vector3(0.4, 0, 0.6)]
shader_parameter/trim_colour = Vector3(0, 0, 0)
shader_parameter/trim_size = 0.02
shader_parameter/gradient_falloff = 3.6
shader_parameter/gradient_base = 3.1
shader_parameter/donut = true
shader_parameter/donut_inner_trim = true
shader_parameter/donut_inner_radius = 0.2

[sub_resource type="CanvasTexture" id="CanvasTexture_gl3w4"]

[node name="LayeredChart" type="CenterContainer"]
offset_right = 50.0
offset_bottom = 50.0
script = ExtResource("1_6rkob")

[node name="InnerPieChart" parent="." instance=ExtResource("2_8hpuw")]
material = SubResource("ShaderMaterial_7apkb")
layout_mode = 2
mouse_filter = 2
texture = SubResource("CanvasTexture_4w45o")
donut_inner_radius = 0.5
radius = 0.4
shadow_displacement = Vector2(0.6, 0.6)
shadow_focus = 1.487
shadow_radius = 0.5
shadow_thickness = 2.29

[node name="OuterPieChart" parent="." instance=ExtResource("2_8hpuw")]
material = SubResource("ShaderMaterial_ryh8o")
layout_mode = 2
mouse_filter = 2
texture = SubResource("CanvasTexture_gl3w4")
donut = true
donut_inner_radius = 0.4
radius = 0.4
shadow_displacement = Vector2(0.75, 0.75)
shadow_radius = 0.8
shadow_thickness = 0.0

[connection signal="mouse_exited" from="." to="." method="_on_mouse_exited"]
